<?xml version="1.0" encoding="UTF-8"?>
<fps version="1.2" url="">
	<generator name="wzw" url=""/>
	<item>
<title>软件版本</title>
<time_limit unit="s">1</time_limit>
<memory_limit unit="mb">32</memory_limit>

<description>相信大家一定有过在网上下载软件而碰到多个不同版本的情况。一般来说，软件的版本号由三个部分组成，主版本号（Major Version Number），子版本号（Minor Version Number)和修订号（Revision_Number）。当软件进行了重大的修改时，主版本号加一；当软件在原有基础上增加部分功能时，主版本号不变，子版本号加一；当软件仅仅修正了部分bug时，主版本号和子版本号都不变，修正号加一。&lt;br /&gt;
在我们比较软件的两个版本的新旧时，都是先比较主版本号，当主版本号相同时再比较子版本号，前两者都相同的情况下再比较修正号。版本号越大的软件越新。&lt;br /&gt;
现在，小明在下载软件的时候碰到了两个版本，请你告诉他哪个版本更新一些。&lt;br /&gt;</description>
<input>输入的第一行有一个整数T，代表有T组测试。接下来有T组测试。&lt;br /&gt;
每组测试分两行，第一行有三个整数代表第一个软件版本的主版本号，子版本号和修订号。第二行也有三个整数代表第二个软件版本的主版本号，子版本号和修订号。&lt;br /&gt;
数据中出现的整数都在[0，1000]范围之内。&lt;br /&gt;</input> 
<output>对于每组测试，如果第一个软件的版本新点，请输出First，如果第二个软件的版本新点，请输出Second，否则输出Same。</output>
<sample_input>3
1 1 0
1 1 1
1 1 1
1 1 0
1 1 1
1 1 1</sample_input>
<sample_output>Second
First
Same</sample_output>
  <test_input>100
93 465 358
231 697 569
252 10 142
787 567 515
617 607 694
731 509 250
957 172 689
368 1000 929
971 564 862
126 565 404
351 837 649
700 907 185
449 125 343
269 54 565
546 693 238
218 329 43
65 162 819
799 496 720
203 466 98
855 406 355
253 624 724
0 14 299
37 425 638
467 66 938
789 428 255
244 119 579
215 183 72
975 219 243
646 803 497
444 48 163
917 246 960
780 473 663
912 16 941
558 503 789
73 182 968
373 362 680
918 488 202
47 765 905
216 833 604
729 848 139
586 113 28
600 670 155
340 460 351
269 487 368
206 794 122
921 29 591
211 150 153
511 983 11
399 837 549
276 961 848
64 105 27
466 322 127
495 393 435
39 101 937
546 221 564
275 808 77
376 470 351
395 265 573
84 731 784
381 425 129
227 604 530
377 185 971
585 389 673
641 443 269
217 300 929
866 988 327
34 63 757
62 70 532
820 572 347
77 222 755
260 65 308
2 938 4
158 985 73
796 628 608
886 25 248
570 656 428
869 75 606
771 887 355
596 58 301
294 449 671
39 427 205
872 493 557
876 987 331
857 516 667
641 363 127
670 827 421
953 621 932
740 575 102
764 263 365
321 852 31
437 347 850
744 827 980
733 136 717
337 322 70
56 642 183
948 839 310
548 925 45
801 820 44
161 447 945
370 814 785
738 636 668
487 23 243
689 670 629
642 934 81
827 836 366
271 847 499
327 537 294
823 574 173
95 808 359
407 208 453
261 554 881
793 337 420
486 927 34
341 646 277
842 196 772
499 264 425
884 981 206
217 767 580
649 327 920
144 800 394
157 221 86
57 123 686
215 491 390
929 373 238
699 808 857
203 635 604
574 883 933
391 403 906
629 800 117
962 165 470
894 978 618
51 289 896
904 862 441
526 705 585
624 518 828
560 708 43
389 888 322
273 554 497
475 435 834
543 505 893
304 496 950
532 235 514
132 993 110
633 729 833
895 156 916
922 727 634
696 732 293
226 214 605
435 423 290
120 150 276
70 318 727
502 57 918
150 582 822
648 21 406
835 999 975
104 642 304
954 484 491
971 896 219
957 473 918
594 555 288
311 660 282
754 478 325
938 944 787
954 34 810
778 93 416
560 190 289
80 167 778
807 338 209
501 133 198
117 998 201
82 218 867
284 286 889
730 577 358
964 331 730
656 743 969
698 175 68
603 503 36
863 803 183
321 909 439
902 793 889
63 266 728
466 863 937
756 264 311
223 191 283
521 411 775
358 308 257
916 822 33
264 732 589
80 171 834
13 61 654
332 258 893
108 982 807
893 276 516
271 967 471
0 0 0
0 0 0
1000 1000 1000
1000 1000 1000
985 985 985
985 985 985
</test_input>
<test_output>Second
Second
Second
First
First
Second
First
First
Second
Second
First
Second
First
Second
First
First
First
Second
First
Second
Second
First
Second
Second
First
Second
First
First
Second
Second
Second
Second
Second
Second
First
First
Second
First
First
First
Second
First
Second
First
First
Second
First
Second
Second
Second
First
First
First
Second
Second
Second
First
First
First
First
First
Second
First
First
Second
First
First
First
First
Second
Second
Second
Second
First
First
Second
Second
First
Second
First
Second
Second
First
Second
First
Second
Second
Second
Second
Second
Second
First
First
First
First
First
First
Same
Same
Same
</test_output>
<hint></hint>
<source>基础题-2.模拟</source>
		<solution language="C">#include&lt;stdio.h&gt;

int main()
{
	int t,i,a[3],b[3];
	scanf("%d",&amp;t);
	while(t--)
	{
		for(i=0;i&lt;3;i++)
			scanf("%d",&amp;a[i]);
		for(i=0;i&lt;3;i++)
			scanf("%d",&amp;b[i]);
		if(a[0]&gt;b[0])
			printf("First\n");
		else if(a[0]&lt;b[0])
			printf("Second\n");
		else
		{
			if(a[1]&gt;b[1])
				printf("First\n");
			else if(a[1]&lt;b[1])
				printf("Second\n");
			else
			{
				if(a[2]&gt;b[2])
					printf("First\n");
				else if(a[2]&lt;b[2])
					printf("Second\n");
				else
					printf("Same\n");
			}
		}
	}
	return 0;
}</solution>
			<solution language="C++">#include&lt;stdio.h&gt;

int main()
{
	int t,i,a[3],b[3];
	scanf("%d",&amp;t);
	while(t--)
	{
		for(i=0;i&lt;3;i++)
			scanf("%d",&amp;a[i]);
		for(i=0;i&lt;3;i++)
			scanf("%d",&amp;b[i]);
		if(a[0]&gt;b[0])
			printf("First\n");
		else if(a[0]&lt;b[0])
			printf("Second\n");
		else
		{
			if(a[1]&gt;b[1])
				printf("First\n");
			else if(a[1]&lt;b[1])
				printf("Second\n");
			else
			{
				if(a[2]&gt;b[2])
					printf("First\n");
				else if(a[2]&lt;b[2])
					printf("Second\n");
				else
					printf("Same\n");
			}
		}
	}
	return 0;
}</solution>
			<solution language="Pascal">var
 n,i,a,b,c,x,y,z:integer;
begin
 readln(n);
 for i:=1 to n do
   begin
    readln(a,b,c);
    readln(x,y,z);
    if (a&lt;x) then writeln('Second')
             else if a&gt;x then  writeln('First') else if (b&lt;y) then  writeln('Second') 
                           else  if b&gt;y then  writeln('First') else if c&lt;z then  writeln('Second')
                                       else if c=z then  writeln('Same') else  writeln('First')
   end;
end.</solution>
			<solution language="Java">import java.util.Scanner;

public class Main {
	//转换int成为ascii码值
	/*
	 public static char toChar(int prefix){
		return (char) prefix;
	}
	*/
	//输入整型
	/*
	public static int scanfInt(){
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		return sc.nextInt();
	}
	*/
	//输入float
	/*
	public static float scanfFloat(){
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		return sc.nextFloat();
	}
	*/
	//判断字符c是否在set中
	/*
	public static boolean isInSet(char c){
		if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'F'){
			return true;
		}
		else
			return false;
	}
	*/
	public static String judgeEdition(int i){
		if(i == 0)
			return "Same";
		else if(i == 1)
			return "First";
		else
			return "Second";
	}
	public static void main(String[] args){
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		int flag = sc.nextInt();
		int[][][] edition = new int[flag][2][3];
		int[] result = new int[flag];
		for(int i=0;i&lt;flag;i++){
			edition[i][0][0] = sc.nextInt();
			edition[i][0][1] = sc.nextInt();
			edition[i][0][2] = sc.nextInt();
			edition[i][1][0] = sc.nextInt();
			edition[i][1][1] = sc.nextInt();
			edition[i][1][2] = sc.nextInt();
			//版本号相等
			if(edition[i][0][0] == edition[i][1][0]){
				//子版本号相等
				if(edition[i][0][1] == edition[i][1][1]){
					//修订号相等
					if(edition[i][0][2] == edition[i][1][2]){
						result[i] = 0;
					}
					//第一个修订号大
					else if(edition[i][0][2] &gt; edition[i][1][2]){
						result[i] = 1;
					}
					//第二个修订号大
					else 
						result[i] = 2;
				}
				//子版本号第一个大
				else if(edition[i][0][1] &gt; edition[i][1][1]){
					result[i] = 1;
				}
				//子版本号第二个大
				else
					result[i] = 2;
			}
			//版本号第一个大
			else if(edition[i][0][0] &gt; edition[i][1][0]){
				result[i] = 1;
			}
			//版本号第二个大
			else
				result[i] = 2;
		}//end of for structure
		//display result
		for(int i = 0;i &lt;flag;i++){
			System.out.println(judgeEdition(result[i]));
		}
		
			
		
	}
}</solution>
			<solution language="Python">#coding = utf-8

import re
import sys

f = sys.stdin;
#f = open('test.in', 'r');

def Process(v1, v2):
	version1 = [];
	version2 = [];
	for var in v1:
		if( '' == var ):
			continue;
		version1 += [var];

	for var in v2:
		if( '' == var ):
			continue;
		version2 += [var];

	# print version1;
	# print version2;
	for i in range(0, 3):
		if( int(version1[i]) &gt; int(version2[i]) ):
			return 'First';
		elif( int(version1[i]) &lt; int(version2[i]) ):
			return 'Second';
	return 'Same';

cas = int(f.readline().split(' ')[0]);
for k in range(0, cas):
	version1 = f.readline().split(' ');
	version2 = f.readline().split(' ');
	print (Process(version1, version2));
</solution>
	</item>
</fps>
